package org.unirender.interaction.automaton;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

import org.unirender.asr.wholeword.language.SupportedLanguages;
import org.unirender.asr.wholeword.recognizer.LiveSpeechRecognizer;
import org.unirender.tts.mary.Mary;
import org.unirender.tts.mary.MaryServer;

public class EmbeddedAutomaton {
	MaryServer TTSserver;
	Mary tts;
	LiveSpeechRecognizer asr;
	Properties properties ; 
	public EmbeddedAutomaton() throws Exception {
		init();
	}

	public void say(String phrase) throws Exception {
		tts.say(phrase);
	}

	public void init() throws Exception {
		FileInputStream fis = new FileInputStream(new File("process.properties"));
		properties = new Properties();
		properties.load(fis);
		
		TTSserver = new MaryServer(getMaryPath());
		TTSserver.startServer();
		tts = new Mary(getMaryVoice());
		asr = new LiveSpeechRecognizer(SupportedLanguages.IT,getModelsPath());
		tts.say("sistema attivato.");
	}

	public void shutdown() throws Exception {
		tts.say("sistema in spegnimento.");
		TTSserver.shutdownServer();
	}

	public String getPlugAddress(){
		return properties.getProperty("plugIPAddress");
	}
	
	public String getHotWord(){
		return properties.getProperty("hotword");
	}
	public String getMaryPath(){
		return properties.getProperty("maryPath");
	}
	public String getMaryVoice(){
		return properties.getProperty("maryVoice");
	}
	public double getThresholdHotword(){
		return Double.parseDouble(properties.getProperty("thresholdHotword"));
	}
	public double getThresholdWord(){
		return Double.parseDouble(properties.getProperty("thresholdWord"));
	}
	public File getModelsPath(){
		return new File(properties.getProperty("modelsPath"));
	}
	
	public void recognizeHotword(String hotword, double threshold)
			throws Exception {

		while (true) {

			// tts.say("a");
			String word = asr.listenAndRecognize();

			if (word == null) {
				// tts.say("o");
			}

			else {
				if (word.equalsIgnoreCase(hotword)
						&& (asr.getScore() > threshold)) {
					break;
				} else {
					// tts.say("e");
				}
			}
		}

	}

	public boolean recognizeOneShot(String hotword, double threshold)
			throws Exception {

		String word = asr.listenAndRecognize();

		if (word == null) {
			return false;
		}

		else {
			if (word.equalsIgnoreCase(hotword) && (asr.getScore() > threshold)) {
				return true;
			} else {
				return false;
			}
		}
	}

}